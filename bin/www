const http = require("http");
const debug = require("debug")("jaenitel-server:server");
const CONFIG = require("../src/configs/index");
const app = require("../app");
const socketIo = require("socket.io");

const port = normalizePort(CONFIG.PORT || "3000");
app.set("port", port);

const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: CONFIG.CLIENT_URL,
    methods: ["GET", "POST"],
  },
});

const { createChat, addChatRoomUser, removeChatRoomUser, handleSocketError } = require("../src/utils/createChat");

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

io.on("connection", (socket) => {
  console.log("User connected");

  socket.on("join-message", (data) => {
    try {
      socket.join(data);
    } catch (error) {
      handleSocketError(socket, error);
    }
  });

  socket.on("sendMessageNotification", (data) => {
    io.to(data.sendTo).emit("messageNotification", data);
  });

  socket.on("join-room", async (data) => {
    try {
      socket.join(data.roomId);

      await addChatRoomUser(data);

      const newChat = await createChat(data);

      await newChat.populate("writer");

      io.to(data.roomId).emit("user-joined", newChat);
    } catch (error) {
      handleSocketError(socket, error);
    }
  });

  socket.on("send-chat", (data) => {
    try {
      io.to(data.roomId).emit("new-chat", data);
    } catch (error) {
      handleSocketError(socket, error);
    }
  });

  socket.on("leave-room", async (data) => {
    try {
      socket.leave(data.roomId);

      await removeChatRoomUser(data);

      const newChat = await createChat(data);

      await newChat.populate("writer");

      io.to(data.roomId).emit("user-left", newChat);
    } catch (error) {
      handleSocketError(socket, error);
    }
  });

  socket.on("leave-message", (data) => {
    try {
      socket.leave(data);
    } catch (error) {
      handleSocketError(socket, error);
    }
  });

  socket.on("disconnect", () => {
    console.log("User disconnected");
  });
});

function normalizePort(value) {
  const port = parseInt(value, 10);

  if (isNaN(port)) {
    return value;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe" + port : "Port" + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
